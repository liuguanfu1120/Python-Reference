{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# -*- encoding:utf-8 -*-\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from tqdm import tqdm\n",
    "import astropy\n",
    "from astropy.io import fits\n",
    "from pyquaternion import Quaternion\n",
    "# from astropy import units as u\n",
    "from astropy.coordinates import solar_system_ephemeris\n",
    "from astropy.coordinates import SkyCoord\n",
    "file1 = '1910061313_1910061328.fits'\n",
    "file2 = '00342_191006sun.fits'\n",
    "fits1 = fits.open(file1)\n",
    "fits2 = fits.open(file2) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "fits2[1].header"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "fits2h = fits2[1].data\n",
    "t = fits2h['t']\n",
    "Q0 = fits2h['Q0']\n",
    "Q1 = fits2h['Q1']\n",
    "Q2 = fits2h['Q2']\n",
    "Q3 = fits2h['Q3']\n",
    "sXcel = fits2h['s_X_cel']\n",
    "sYcel = fits2h['s_Y_cel']\n",
    "sZcel = fits2h['s_Z_cel']\n",
    "gXcel = fits2h['g_X_cel']\n",
    "gYcel = fits2h['g_Y_cel']\n",
    "gZcel = fits2h['g_Z_cel']\n",
    "sXdet = fits2h['s_X_det']\n",
    "sYdet = fits2h['s_Y_det']\n",
    "sZdet = fits2h['s_Z_det']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "sunXYZdet = np.zeros(())\n",
    "for i in tqdm(range(len(t))):\n",
    "    Q = Quaternion(Q0[i], Q1[i], Q2[i], Q3[i])\n",
    "    scel = np.array([sXcel[i], sYcel[i], sZcel[i]])\n",
    "    scel = scel / np.linalg.norm(scel)\n",
    "    sdet = Q.inverse.rotate(scel)\n",
    "    sunXYZdet[i] = sdet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sunXYZdet = np.zeros(())\n",
    "# for i in tqdm(range(len(t))):\n",
    "#     Q = Quaternion(Q0[i], Q1[i], Q2[i], Q3[i])\n",
    "#     scel = np.array([sXcel[i], sYcel[i], sZcel[i]])\n",
    "#     scel = scel / np.linalg.norm(scel)\n",
    "#     sdet = Q.inverse.rotate(scel)\n",
    "#     sunXYZdet[i] = sdet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "Q = Quaternion(Q0[0], Q1[0], Q2[0], Q3[0])\n",
    "scel = np.array([sXcel[0], sYcel[0], sZcel[0]])\n",
    "scel = scel / np.linalg.norm(scel)\n",
    "sdet = Q.rotate(scel)\n",
    "sdet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "sunXYZdet = np.zeros(())\n",
    "for i in tqdm(range(len(t))):\n",
    "    Q = Quaternion(Q0[i], Q1[i], Q2[i], Q3[i])\n",
    "    scel = np.array([sXcel[i], sYcel[i], sZcel[i]])\n",
    "    scel = scel / np.linalg.norm(scel)\n",
    "    sdet = Q.inverse.rotate(scel)\n",
    "    sunXYZdet[i] = sdet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "sunXYZdet = np.zeros((3,len(t)))\n",
    "for i in tqdm(range(len(t))):\n",
    "    Q = Quaternion(Q0[i], Q1[i], Q2[i], Q3[i])\n",
    "    scel = np.array([sXcel[i], sYcel[i], sZcel[i]])\n",
    "    scel = scel / np.linalg.norm(scel)\n",
    "    sdet = Q.inverse.rotate(scel)\n",
    "    sunXYZdet[i] = sdet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "sunXYZdet = np.zeros((3,len(t)))\n",
    "for i in tqdm(range(len(t))):\n",
    "    Q = Quaternion(Q0[i], Q1[i], Q2[i], Q3[i])\n",
    "    scel = np.array([sXcel[i], sYcel[i], sZcel[i]])\n",
    "    scel = scel / np.linalg.norm(scel)\n",
    "    sdet = Q.inverse.rotate(scel)\n",
    "    sunXYZdet[:,i] = sdet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(10):\n",
    "    Q = Quaternion(Q0[i], Q1[i], Q2[i], Q3[i])\n",
    "    gcel = Q.inverse.rotate(scel)\n",
    "    print(gcel,np.array([gXcel[i],gYcel[i],gZcel[i]]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(10):\n",
    "    Q = Quaternion(Q0[i], Q1[i], Q2[i], Q3[i])\n",
    "    gcel1 = np.array([gXcel[i],gYcel[i],gZcel[i]])\n",
    "    gcel = Q.inverse.rotate(gcel1)\n",
    "    print(gcel,np.array([gXcel[i],gYcel[i],gZcel[i]]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(10):\n",
    "    Q = Quaternion(Q0[i], Q1[i], Q2[i], Q3[i])\n",
    "    gcel1 = np.array([gXcel[i],gYcel[i],gZcel[i]])\n",
    "    gcel = Q.rotate(gcel1)\n",
    "    print(gcel,np.array([gXcel[i],gYcel[i],gZcel[i]]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(10):\n",
    "    Q = Quaternion(Q0[i], Q1[i], Q2[i], Q3[i])\n",
    "    gcel1 = np.array([gXcel[i],gYcel[i],gZcel[i]])\n",
    "    gcel = Q.inverse.rotate(gcel1)\n",
    "    print(gcel,np.array([gXcel[i],gYcel[i],gZcel[i]]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(10):\n",
    "    Q = Quaternion(Q0[i], Q1[i], Q2[i], Q3[i])\n",
    "    gcel1 = np.array([gXcel[i],gYcel[i],gZcel[i]])\n",
    "#     gcel = Q.inverse.rotate(gcel1)\n",
    "    gcel = Q.rotate(np.array([0,0,1]))\n",
    "    print(gcel,np.array([gXcel[i],gYcel[i],gZcel[i]]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "fits2h = fits2[1].data\n",
    "t = fits2h['t']\n",
    "Q0 = fits2h['Q0']\n",
    "Q1 = fits2h['Q1']\n",
    "Q2 = fits2h['Q2']\n",
    "Q3 = fits2h['Q3']\n",
    "sXcel = fits2h['s_X_cel']\n",
    "sYcel = fits2h['s_Y_cel']\n",
    "sZcel = fits2h['s_Z_cel']\n",
    "gXcel = fits2h['g_X_cel']\n",
    "gYcel = fits2h['g_Y_cel']\n",
    "gZcel = fits2h['g_Z_cel']\n",
    "gRacel = fits2h['g_Ra_cel']\n",
    "gDeccel = fits2h['g_Dec_cel']\n",
    "sXdet = fits2h['s_X_det']\n",
    "sYdet = fits2h['s_Y_det']\n",
    "sZdet = fits2h['s_Z_det']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(10):\n",
    "    phi = np.gXcel[i]/np.sqrt(gXcel[i]**2+gYcel[i]**2)\n",
    "    phi = np.arccos(phi)\n",
    "    print(phi,gRacel[i],gRacel[i]-phi)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(10):\n",
    "    phi = gXcel[i]/np.sqrt(gXcel[i]**2+gYcel[i]**2)\n",
    "    phi = np.arccos(phi)\n",
    "    print(phi,gRacel[i],gRacel[i]-phi)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "fits2h = fits2[1].data\n",
    "t = fits2h['t']\n",
    "Q0 = fits2h['Q0']\n",
    "Q1 = fits2h['Q1']\n",
    "Q2 = fits2h['Q2']\n",
    "Q3 = fits2h['Q3']\n",
    "sXcel = fits2h['s_X_cel']\n",
    "sYcel = fits2h['s_Y_cel']\n",
    "sZcel = fits2h['s_Z_cel']\n",
    "sRacel = fits2h['s_Ra_cel']\n",
    "sDeccel = fits2h['s_Dec_cel']\n",
    "gXcel = fits2h['g_X_cel']\n",
    "gYcel = fits2h['g_Y_cel']\n",
    "gZcel = fits2h['g_Z_cel']\n",
    "gRacel = fits2h['g_Ra_cel']\n",
    "gDeccel = fits2h['g_Dec_cel']\n",
    "sXdet = fits2h['s_X_det']\n",
    "sYdet = fits2h['s_Y_det']\n",
    "sZdet = fits2h['s_Z_det']\n",
    "sRadet = fits2h['s_Ra_det']\n",
    "sDecdet = fits2h['s_Dec_det']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(10):\n",
    "    phi = sXcel[i]/np.sqrt(sXcel[i]**2+sYcel[i]**2)\n",
    "    phi = np.arccos(phi)\n",
    "    print(phi,sRacel[i],sRacel[i]-phi)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(10):\n",
    "    phi = sXdet[i]/np.sqrt(gXdet[i]**2+gYdet[i]**2)\n",
    "    phi = np.arccos(phi)\n",
    "    print(phi,sRadet[i],sRadet[i]-phi)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(10):\n",
    "    phi = sXdet[i]/np.sqrt(sXdet[i]**2+sYdet[i]**2)\n",
    "    phi = np.arccos(phi)\n",
    "    print(phi,sRadet[i],sRadet[i]-phi)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(10):\n",
    "    print(sunXYZdet[:,i],[sXdet[i],sYdet[i],sZdet[i]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(10):\n",
    "    print(sunXYZdet[:,i]-np.array([sXdet[i],sYdet[i],sZdet[i]]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "sunXYZdet = np.zeros((3,len(t)))\n",
    "\n",
    "for i in tqdm(range(len(t))):\n",
    "    Q = Quaternion(Q0[i], Q1[i], Q2[i], Q3[i])\n",
    "    scel = np.array([sXcel[i], sYcel[i], sZcel[i]])\n",
    "    scel = scel / np.linalg.norm(scel)\n",
    "    sdet = Q.inverse.rotate(scel)\n",
    "    sunXYZdet[:,i] = sdet\n",
    "\n",
    "gXYZcel = np.zeros(3,len(t))\n",
    "for i in tqdm(range(len(t))):\n",
    "    Q = Quaternion(Q0[i], Q1[i], Q2[i], Q3[i])\n",
    "    gXYZcel[:,i] = Q.rotate(np.array([0.0,0.0,1.0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "sunXYZdet = np.zeros((3,len(t)))\n",
    "\n",
    "for i in tqdm(range(len(t))):\n",
    "    Q = Quaternion(Q0[i], Q1[i], Q2[i], Q3[i])\n",
    "    scel = np.array([sXcel[i], sYcel[i], sZcel[i]])\n",
    "    scel = scel / np.linalg.norm(scel)\n",
    "    sdet = Q.inverse.rotate(scel)\n",
    "    sunXYZdet[:,i] = sdet\n",
    "\n",
    "gXYZcel = np.zeros((3,len(t)))\n",
    "for i in tqdm(range(len(t))):\n",
    "    Q = Quaternion(Q0[i], Q1[i], Q2[i], Q3[i])\n",
    "    gXYZcel[:,i] = Q.rotate(np.array([0.0,0.0,1.0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# for i in range(10):\n",
    "#     print(sunXYZdet[:,i]-np.array([sXdet[i],sYdet[i],sZdet[i]]))\n",
    "for i in range(10):\n",
    "    print(gXYZcel[:,i]-np.array([gXcel[i],gYcel[i],gZcel[i]]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "i=0\n",
    "Q = Quaternion(Q0[i], Q1[i], Q2[i], Q3[i])\n",
    "g1 = Q.rotate(np.array([0.0,0.0,1.0]))\n",
    "print(g1,np.array([gXcel[i],gYcel[i],gZcel[i]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "i=0\n",
    "Q = Quaternion(Q0[i], Q1[i], Q2[i], Q3[i])\n",
    "g1 = Q.rotate(np.array([0.0,0.0,1.0]))\n",
    "print(g1,np.array([gXcel[i],gYcel[i],gZcel[i]]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "i=0\n",
    "Q = Quaternion(Q0[i], Q1[i], Q2[i], Q3[i])\n",
    "g1 = Q.rotate(np.array([0.0,0.0,-1.0]))\n",
    "print(g1,np.array([gXcel[i],gYcel[i],gZcel[i]]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "i=0\n",
    "Q = Quaternion(Q0[i], Q1[i], Q2[i], Q3[i])\n",
    "g1 = Q.inverse.rotate(np.array([0.0,0.0,1.0]))\n",
    "print(g1,np.array([gXcel[i],gYcel[i],gZcel[i]]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "i=1\n",
    "Q = Quaternion(Q0[i], Q1[i], Q2[i], Q3[i])\n",
    "g1 = Q.inverse.rotate(np.array([0.0,0.0,1.0]))\n",
    "print(g1,np.array([gXcel[i],gYcel[i],gZcel[i]]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "i=1\n",
    "Q = Quaternion(Q0[i], Q1[i], Q2[i], Q3[i])\n",
    "g1 = Q.inverse.rotate(np.array([0.0,0.0,-1.0]))\n",
    "print(g1,np.array([gXcel[i],gYcel[i],gZcel[i]]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "i=1\n",
    "Q = Quaternion(Q0[i], Q1[i], Q2[i], Q3[i])\n",
    "g1 = Q.inverse.rotate(np.array([0.0,0.0,1.0]))\n",
    "print(g1,np.array([gXcel[i],gYcel[i],gZcel[i]]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "i=1\n",
    "Q = Quaternion(Q0[i], Q1[i], Q2[i], Q3[i])\n",
    "g1 = Q.rotate(np.array([0.0,0.0,1.0]))\n",
    "print(g1,np.array([gXcel[i],gYcel[i],gZcel[i]]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "i=1\n",
    "Q = Quaternion(Q0[i], Q1[i], Q2[i], Q3[i])\n",
    "g1 = Q.rotate(np.array([0.0,0.0,-1.0]))\n",
    "print(g1,np.array([gXcel[i],gYcel[i],gZcel[i]]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "# -*- encoding:utf-8 -*-\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from tqdm import tqdm\n",
    "import astropy\n",
    "from astropy.io import fits\n",
    "from pyquaternion import Quaternion\n",
    "# from astropy import units as u\n",
    "from astropy.coordinates import solar_system_ephemeris\n",
    "from astropy.coordinates import SkyCoord\n",
    "file1 = '1910061313_1910061328.fits'\n",
    "file2 = '00342_191006sun.fits'\n",
    "fits1 = fits.open(file1)\n",
    "fits2 = fits.open(file2) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "fits2[1].header"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "fits2h[:2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "fits2h = fits2[1].data\n",
    "t = fits2h['t']\n",
    "Q0 = fits2h['Q0']\n",
    "Q1 = fits2h['Q1']\n",
    "Q2 = fits2h['Q2']\n",
    "Q3 = fits2h['Q3']\n",
    "sXcel = fits2h['s_X_cel']\n",
    "sYcel = fits2h['s_Y_cel']\n",
    "sZcel = fits2h['s_Z_cel']\n",
    "sRacel = fits2h['s_Ra_cel']\n",
    "sDeccel = fits2h['s_Dec_cel']\n",
    "gXcel = fits2h['g_X_cel']\n",
    "gYcel = fits2h['g_Y_cel']\n",
    "gZcel = fits2h['g_Z_cel']\n",
    "gRacel = fits2h['g_Ra_cel']\n",
    "gDeccel = fits2h['g_Dec_cel']\n",
    "sXdet = fits2h['s_X_det']\n",
    "sYdet = fits2h['s_Y_det']\n",
    "sZdet = fits2h['s_Z_det']\n",
    "sRadet = fits2h['s_Ra_det']\n",
    "sDecdet = fits2h['s_Dec_det']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "sunXYZdet = np.zeros((3,len(t)))\n",
    "\n",
    "for i in tqdm(range(len(t))):\n",
    "    Q = Quaternion(Q0[i], Q1[i], Q2[i], Q3[i])\n",
    "    scel = np.array([sXcel[i], sYcel[i], sZcel[i]])\n",
    "    scel = scel / np.linalg.norm(scel)\n",
    "    sdet = Q.inverse.rotate(scel)\n",
    "    sunXYZdet[:,i] = sdet\n",
    "\n",
    "gXYZcel = np.zeros((3,len(t)))\n",
    "for i in tqdm(range(len(t))):\n",
    "    Q = Quaternion(Q0[i], Q1[i], Q2[i], Q3[i])\n",
    "    gXYZcel[:,i] = Q.rotate(np.array([0.0,0.0,1.0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "i=1\n",
    "Q = Quaternion(Q0[i], Q1[i], Q2[i], Q3[i])\n",
    "g1 = Q.rotate(np.array([0.0,0.0,-1.0]))\n",
    "print(g1,np.array([gXcel[i],gYcel[i],gZcel[i]]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "i=1\n",
    "Q = Quaternion(Q0[i], Q1[i], Q2[i], Q3[i])\n",
    "g1 = Q.rotate(np.array([0.0,0.0,-1.0]))\n",
    "print(g1,np.array([gXcel[i],gYcel[i],gZcel[i]]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "i=2\n",
    "Q = Quaternion(Q0[i], Q1[i], Q2[i], Q3[i])\n",
    "g1 = Q.rotate(np.array([0.0,0.0,-1.0]))\n",
    "print(g1,np.array([gXcel[i],gYcel[i],gZcel[i]]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "sunXYZdet = np.zeros((3,len(t)))\n",
    "\n",
    "for i in tqdm(range(len(t))):\n",
    "    Q = Quaternion(Q0[i], Q1[i], Q2[i], Q3[i])\n",
    "    scel = np.array([sXcel[i], sYcel[i], sZcel[i]])\n",
    "    scel = scel / np.linalg.norm(scel)\n",
    "    sdet = Q.inverse.rotate(scel)\n",
    "    sunXYZdet[:,i] = sdet\n",
    "\n",
    "gXYZcel = np.zeros((3,len(t)))\n",
    "for i in tqdm(range(len(t))):\n",
    "    Q = Quaternion(Q0[i], Q1[i], Q2[i], Q3[i])\n",
    "    gXYZcel[:,i] = Q.rotate(np.array([0.0,0.0,-1.0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "# for i in range(10):\n",
    "#     print(sunXYZdet[:,i]-np.array([sXdet[i],sYdet[i],sZdet[i]]))\n",
    "for i in range(10):\n",
    "    print(gXYZcel[:,i]-np.array([gXcel[i],gYcel[i],gZcel[i]]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "# -*- encoding:utf-8 -*-\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from tqdm import tqdm\n",
    "import astropy\n",
    "from astropy.io import fits\n",
    "from pyquaternion import Quaternion\n",
    "# from astropy import units as u\n",
    "from astropy.coordinates import solar_system_ephemeris\n",
    "from astropy.coordinates import SkyCoord\n",
    "file1 = '1910061313_1910061328.fits'\n",
    "file2 = '00342_191006sun.fits'\n",
    "fits1 = fits.open(file1)\n",
    "fits2 = fits.open(file2) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "# fits2[1].header"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "fits2h[:2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "fits2h = fits2[1].data\n",
    "t = fits2h['t']\n",
    "Q0 = fits2h['Q0']\n",
    "Q1 = fits2h['Q1']\n",
    "Q2 = fits2h['Q2']\n",
    "Q3 = fits2h['Q3']\n",
    "sXcel = fits2h['s_X_cel']\n",
    "sYcel = fits2h['s_Y_cel']\n",
    "sZcel = fits2h['s_Z_cel']\n",
    "sRacel = fits2h['s_Ra_cel']\n",
    "sDeccel = fits2h['s_Dec_cel']\n",
    "gXcel = fits2h['g_X_cel']\n",
    "gYcel = fits2h['g_Y_cel']\n",
    "gZcel = fits2h['g_Z_cel']\n",
    "gRacel = fits2h['g_Ra_cel']\n",
    "gDeccel = fits2h['g_Dec_cel']\n",
    "sXdet = fits2h['s_X_det']\n",
    "sYdet = fits2h['s_Y_det']\n",
    "sZdet = fits2h['s_Z_det']\n",
    "sRadet = fits2h['s_Ra_det']\n",
    "sDecdet = fits2h['s_Dec_det']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "sunXYZdet = np.zeros((3,len(t)))\n",
    "\n",
    "for i in tqdm(range(len(t))):\n",
    "    Q = Quaternion(Q0[i], Q1[i], Q2[i], Q3[i])\n",
    "    scel = np.array([sXcel[i], sYcel[i], sZcel[i]])\n",
    "    scel = scel / np.linalg.norm(scel)\n",
    "    sdet = Q.inverse.rotate(scel)\n",
    "    sunXYZdet[:,i] = sdet\n",
    "\n",
    "gXYZcel = np.zeros((3,len(t)))\n",
    "for i in tqdm(range(len(t))):\n",
    "    Q = Quaternion(Q0[i], Q1[i], Q2[i], Q3[i])\n",
    "    gXYZcel[:,i] = Q.rotate(np.array([0.0,0.0,-1.0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "# for i in range(10):\n",
    "#     print(sunXYZdet[:,i]-np.array([sXdet[i],sYdet[i],sZdet[i]]))\n",
    "for i in range(10):\n",
    "    print(gXYZcel[:,i]-np.array([gXcel[i],gYcel[i],gZcel[i]]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(10):\n",
    "    Q = Quaternion(Q0[i], Q1[i], Q2[i], Q3[i])\n",
    "    gcel1 = np.array([gXcel[i],gYcel[i],gZcel[i]])\n",
    "#     gcel = Q.inverse.rotate(gcel1)\n",
    "    gcel = Q.rotate(np.array([0,0,1]))\n",
    "    print(gcel,np.array([gXcel[i],gYcel[i],gZcel[i]]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(10):\n",
    "    Q = Quaternion(Q0[i], Q1[i], Q2[i], Q3[i])\n",
    "    gcel1 = np.array([gXcel[i],gYcel[i],gZcel[i]])\n",
    "#     gcel = Q.inverse.rotate(gcel1)\n",
    "    gcel = Q.rotate(np.array([0,0,-1]))\n",
    "    print(gcel,np.array([gXcel[i],gYcel[i],gZcel[i]]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(10):\n",
    "    phi = gXcel[i]/np.sqrt(gXcel[i]**2+gYcel[i]**2)\n",
    "    phi = np.arccos(phi)\n",
    "    print(phi,gRacel[i],gRacel[i]-phi)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.array([sXcel[i], sYcel[i], sZcel[i]]).shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "g1.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "gXYZcel[:,1].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "sunXYZdet = np.zeros((len(t),3))\n",
    "\n",
    "for i in tqdm(range(len(t))):\n",
    "    Q = Quaternion(Q0[i], Q1[i], Q2[i], Q3[i])\n",
    "    scel = np.array([sXcel[i], sYcel[i], sZcel[i]])\n",
    "    scel = scel / np.linalg.norm(scel)\n",
    "    sdet = Q.inverse.rotate(scel)\n",
    "    sunXYZdet[i] = sdet\n",
    "\n",
    "gXYZcel = np.zeros((len(t),3))\n",
    "for i in tqdm(range(len(t))):\n",
    "    Q = Quaternion(Q0[i], Q1[i], Q2[i], Q3[i])\n",
    "    gXYZcel[i] = Q.rotate(np.array([0.0,0.0,-1.0]))\n",
    "# gRacel1 = gXYZcel[:,1]/np.sqrt(gXYZcel[;,1]**2+)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "# for i in range(10):\n",
    "#     print(sunXYZdet[:,i]-np.array([sXdet[i],sYdet[i],sZdet[i]]))\n",
    "for i in range(10):\n",
    "    print(gXYZcel[i]-np.array([gXcel[i],gYcel[i],gZcel[i]]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(10):\n",
    "    Q = Quaternion(Q0[i], Q1[i], Q2[i], Q3[i])\n",
    "    gcel1 = np.array([gXcel[i],gYcel[i],gZcel[i]])\n",
    "#     gcel = Q.inverse.rotate(gcel1)\n",
    "    gcel = Q.rotate(np.array([0,0,-1]))\n",
    "    print(gcel,np.array([gXcel[i],gYcel[i],gZcel[i]]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "sunXYZdet = np.zeros((len(t),3))\n",
    "\n",
    "for i in tqdm(range(len(t))):\n",
    "    Q = Quaternion(Q0[i], Q1[i], Q2[i], Q3[i])\n",
    "    scel = np.array([sXcel[i], sYcel[i], sZcel[i]])\n",
    "    scel = scel / np.linalg.norm(scel)\n",
    "    sdet = Q.inverse.rotate(scel)\n",
    "    sunXYZdet[i] = sdet\n",
    "\n",
    "gXYZcel = np.zeros((len(t),3))\n",
    "for i in tqdm(range(len(t))):\n",
    "    Q = Quaternion(Q0[i], Q1[i], Q2[i], Q3[i])\n",
    "    gXYZcel[i] = Q.rotate(np.array([0.0,0.0,-1.0]))\n",
    "gRacel1 = np.arccos(gXYZcel[:,0]/np.sqrt(gXYZcel[:,0]**2+gXYZcel[:,1]**2))\n",
    "gDeccel1 = np.arcsin(gXYZcel[:,2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "sunXYZdet = np.zeros((len(t),3))\n",
    "\n",
    "for i in tqdm(range(len(t))):\n",
    "    Q = Quaternion(Q0[i], Q1[i], Q2[i], Q3[i])\n",
    "    scel = np.array([sXcel[i], sYcel[i], sZcel[i]])\n",
    "    scel = scel / np.linalg.norm(scel)\n",
    "    sdet = Q.inverse.rotate(scel)\n",
    "    sunXYZdet[i] = sdet\n",
    "\n",
    "gXYZcel = np.zeros((len(t),3))\n",
    "for i in tqdm(range(len(t))):\n",
    "    Q = Quaternion(Q0[i], Q1[i], Q2[i], Q3[i])\n",
    "    gXYZcel[i] = Q.rotate(np.array([0.0,0.0,-1.0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "gRacel1 = np.arccos(gXYZcel[:,0]/np.sqrt(gXYZcel[:,0]**2+gXYZcel[:,1]**2))\n",
    "gDeccel1 = np.arcsin(gXYZcel[:,2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "gRacel1 = np.arccos(gXYZcel[:,0]/np.sqrt(gXYZcel[:,0]**2+gXYZcel[:,1]**2))\n",
    "# gDeccel1 = np.arcsin(gXYZcel[:,2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "gRacel1 = np.arccos(gXYZcel[:,0]/np.sqrt(gXYZcel[:,0]**2+gXYZcel[:,1]**2))\n",
    "gRacel1\n",
    "# gDeccel1 = np.arcsin(gXYZcel[:,2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "gRacel1 = np.arccos(gXYZcel[:,0]/np.sqrt(gXYZcel[:,0]**2+gXYZcel[:,1]**2))\n",
    "(gRacel1-gRacel).mean()\n",
    "# gDeccel1 = np.arcsin(gXYZcel[:,2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "gRacel1 = np.arccos(gXYZcel[:,0]/np.sqrt(gXYZcel[:,0]**2+gXYZcel[:,1]**2))\n",
    "(gRacel1-gRacel).mean\n",
    "# gDeccel1 = np.arcsin(gXYZcel[:,2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "gRacel1 = np.arccos(gXYZcel[:,0]/np.sqrt(gXYZcel[:,0]**2+gXYZcel[:,1]**2))\n",
    "# gDeccel1 = np.arcsin(gXYZcel[:,2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "# gRacel1 = np.arccos(gXYZcel[:,0]/np.sqrt(gXYZcel[:,0]**2+gXYZcel[:,1]**2))\n",
    "gDeccel1 = np.arcsin(gXYZcel[:,2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "gXYZcel[:100,0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "gRacel1 = np.arccos(gXYZcel[:,0]/np.sqrt(gXYZcel[:,0]**2+gXYZcel[:,1]**2))\n",
    "# gDeccel1 = np.arcsin(gXYZcel[:,2])\n",
    "gDeccel1 = np.zeros(len(t))\n",
    "for i in range(len(t)):\n",
    "    gDeccel1[i] = np.arccos(gXYZcel[:,0]/np.sqrt(gXYZcel[:,0]**2+gXYZcel[:,1]**2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "gRacel1 = np.arccos(gXYZcel[:,0]/np.sqrt(gXYZcel[:,0]**2+gXYZcel[:,1]**2))\n",
    "# gDeccel1 = np.arcsin(gXYZcel[:,2])\n",
    "gDeccel1 = np.zeros(len(t))\n",
    "for i in range(len(t)):\n",
    "    gDeccel1[i] = np.arccos(gXYZcel[i,0]/np.sqrt(gXYZcel[i,0]**2+gXYZcel[i,1]**2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "gRacel1 = np.arccos(gXYZcel[:,0]/np.sqrt(gXYZcel[:,0]**2+gXYZcel[:,1]**2))\n",
    "# gDeccel1 = np.arcsin(gXYZcel[:,2])\n",
    "gDeccel1 = np.zeros(len(t))\n",
    "for i in range(len(t)):\n",
    "    print(i)\n",
    "    gDeccel1[i] = np.arccos(gXYZcel[i,0]/np.sqrt(gXYZcel[i,0]**2+gXYZcel[i,1]**2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "gRacel1 = np.arccos(gXYZcel[:,0]/np.sqrt(gXYZcel[:,0]**2+gXYZcel[:,1]**2))\n",
    "# gDeccel1 = np.arcsin(gXYZcel[:,2])\n",
    "gDeccel1 = np.zeros(len(t))\n",
    "for i in range(len(t)):\n",
    "#     print(i)\n",
    "    gDeccel1[i] = np.arccos(gXYZcel[i,0]/np.sqrt(1-gXYZcel[i,2]**2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "gRacel1 = np.arccos(gXYZcel[:,0]/np.sqrt(gXYZcel[:,0]**2+gXYZcel[:,1]**2))\n",
    "# gDeccel1 = np.arcsin(gXYZcel[:,2])\n",
    "# gDeccel1 = np.zeros(len(t))\n",
    "# for i in range(len(t)):\n",
    "# #     print(i)\n",
    "#     gDeccel1[i] = np.arccos(gXYZcel[i,0]/np.sqrt(1-gXYZcel[i,2]**2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "# gRacel1 = np.arccos(gXYZcel[:,0]/np.sqrt(gXYZcel[:,0]**2+gXYZcel[:,1]**2))\n",
    "gDeccel1 = np.arcsin(gXYZcel[:,2])\n",
    "# gDeccel1 = np.zeros(len(t))\n",
    "# for i in range(len(t)):\n",
    "# #     print(i)\n",
    "#     gDeccel1[i] = np.arccos(gXYZcel[i,0]/np.sqrt(1-gXYZcel[i,2]**2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "gRacel1 = np.arccos(gXYZcel[:,0]/np.sqrt(gXYZcel[:,0]**2+gXYZcel[:,1]**2))\n",
    "gDeccel1 = np.arcsin(gXYZcel[:,2])\n",
    "# gDeccel1 = np.zeros(len(t))\n",
    "# for i in range(len(t)):\n",
    "# #     print(i)\n",
    "#     gDeccel1[i] = np.arccos(gXYZcel[i,0]/np.sqrt(1-gXYZcel[i,2]**2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "mask = a=np.nan\n",
    "num = np.arange(len(t))\n",
    "num[mask]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [],
   "source": [
    "mask = a=np.nan\n",
    "np.argwhere(np.isnan(gRacel1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "gRacel1.shape,np.argwhere(np.isnan(gRacel1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "gRacel1.shape,np.argwhere(np.isnan(gRacel1)).shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "a=np.argwhere(np.isnan(gRacel1)).shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "a=np.argwhere(np.isnan(gRacel1)).shape\n",
    "a.ravel()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "a=np.argwhere(np.isnan(gRacel1))\n",
    "a.ravel()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "a=np.argwhere(np.isnan(gRacel1))\n",
    "a.ravel(),gXYZcel[a]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "a=np.argwhere(np.isnan(gRacel1))\n",
    "a.ravel(),gZcel[a]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "a=np.argwhere(np.isnan(gRacel1))\n",
    "a.ravel(),gRacel[a]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [],
   "source": [
    "gRacel1 = np.arccos(gXYZcel[:,0]/np.sqrt(gXYZcel[:,0]**2+gXYZcel[:,1]**2))\n",
    "a = np.argwhere(np.isnan(gRacel1))\n",
    "a = a.ravel()\n",
    "gRacel1[a]=0.0\n",
    "gDeccel1 = np.arcsin(gXYZcel[:,2])\n",
    "# gDeccel1 = np.zeros(len(t))\n",
    "# for i in range(len(t)):\n",
    "# #     print(i)\n",
    "#     gDeccel1[i] = np.arccos(gXYZcel[i,0]/np.sqrt(1-gXYZcel[i,2]**2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "a=np.argwhere(np.isnan(gRacel1))\n",
    "a.ravel(),gRacel[a]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "a=np.argwhere(np.isnan(gRacel1))\n",
    "a,gRacel[a]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [],
   "source": [
    "gRacel1 = np.arccos(gXYZcel[:,0]/np.sqrt(gXYZcel[:,0]**2+gXYZcel[:,1]**2))\n",
    "a = np.argwhere(np.isnan(gRacel1))\n",
    "a = a.ravel()\n",
    "gRacel1[a]=0.0\n",
    "gDeccel1 = np.arcsin(gXYZcel[:,2])\n",
    "plt.plot(gRacel-gRacel1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [],
   "source": [
    "gRacel1 = np.arccos(gXYZcel[:,0]/np.sqrt(gXYZcel[:,0]**2+gXYZcel[:,1]**2))\n",
    "a = np.argwhere(np.isnan(gRacel1))\n",
    "a = a.ravel()\n",
    "gRacel1[a]=0.0\n",
    "gDeccel1 = np.arcsin(gXYZcel[:,2])\n",
    "fig = plt.figure(dpi=250)\n",
    "plt.plot(gRacel-gRacel1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [],
   "source": [
    "gRacel[:10],gRacel1[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "gRacel[:10]-gRacel1[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [],
   "source": [
    "gRacel1 = np.arccos(gXYZcel[:,0]/np.sqrt(gXYZcel[:,0]**2+gXYZcel[:,1]**2))\n",
    "a = np.argwhere(np.isnan(gRacel1))\n",
    "a = a.ravel()\n",
    "gRacel1[a]=0.0\n",
    "gDeccel1 = np.arcsin(gXYZcel[:,2])\n",
    "fig = plt.figure(dpi=250)\n",
    "plt.plot(np.arange(len(t)),gRacel-gRacel1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [],
   "source": [
    "gRacel-gRacel1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [],
   "source": [
    "gRacel[:10]-gRacel1[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [],
   "source": [
    "gRacel[:20]-gRacel1[:20]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [],
   "source": [
    "gRacel[:20]-gRacel1[:20],(gRacel-gRacel1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [],
   "source": [
    "gRacel[:20]-gRacel1[:20],(gRacel-gRacel1)[:-20]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [],
   "source": [
    "gRacel[:20]-gRacel1[:20],(gRacel-gRacel1).max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [],
   "source": [
    "gRacel1 = np.arctan2(gXYZcel[:,0]/np.sqrt(gXYZcel[:,0]**2+gXYZcel[:,1]**2))\n",
    "a = np.argwhere(np.isnan(gRacel1))\n",
    "a = a.ravel()\n",
    "gRacel1[a]=0.0\n",
    "gDeccel1 = np.arcsin(gXYZcel[:,2])\n",
    "fig = plt.figure(dpi=250)\n",
    "plt.plot(np.arange(len(t)),gRacel-gRacel1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [],
   "source": [
    "gRacel1 = np.arctan2(gXYZcel[:,1]/gXYZcel[:,0])\n",
    "# a = np.argwhere(np.isnan(gRacel1))\n",
    "# a = a.ravel()\n",
    "# gRacel1[a]=0.0\n",
    "gDeccel1 = np.arcsin(gXYZcel[:,2])\n",
    "fig = plt.figure(dpi=250)\n",
    "plt.plot(np.arange(len(t)),gRacel-gRacel1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [],
   "source": [
    "gRacel1 = np.arctan2(gXYZcel[:,1],gXYZcel[:,0])\n",
    "# a = np.argwhere(np.isnan(gRacel1))\n",
    "# a = a.ravel()\n",
    "# gRacel1[a]=0.0\n",
    "gDeccel1 = np.arcsin(gXYZcel[:,2])\n",
    "fig = plt.figure(dpi=250)\n",
    "plt.plot(np.arange(len(t)),gRacel-gRacel1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [],
   "source": [
    "gRacel1 = np.arctan2(gXYZcel[:,1],gXYZcel[:,0])+np.pi\n",
    "# a = np.argwhere(np.isnan(gRacel1))\n",
    "# a = a.ravel()\n",
    "# gRacel1[a]=0.0\n",
    "gDeccel1 = np.arcsin(gXYZcel[:,2])\n",
    "fig = plt.figure(dpi=250)\n",
    "plt.plot(np.arange(len(t)),gRacel-gRacel1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.arccos(-0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.arccos(-0.5)/np.pi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [],
   "source": [
    "def arccos2(x,y):\n",
    "    if x==0 and y==0:\n",
    "        return 0\n",
    "    elif y>0:\n",
    "        return np.arccos(x/np.sqrt(x**2+y**2))\n",
    "    elif y<0:\n",
    "        return np.pi+arccos(x/np.sqrt(x**2+y**2))\n",
    "    \n",
    "  arccos2 = np.vectorize(arccos2)   \n",
    "    \n",
    "gDeccel1 = np.arcsin(gXYZcel[:,2])\n",
    "fig = plt.figure(dpi=250)\n",
    "plt.plot(np.arange(len(t)),gRacel-gRacel1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [],
   "source": [
    "def arccos2(x,y):\n",
    "    if x==0 and y==0:\n",
    "        return 0\n",
    "    elif y>0:\n",
    "        return np.arccos(x/np.sqrt(x**2+y**2))\n",
    "    elif y<0:\n",
    "        return np.pi+arccos(x/np.sqrt(x**2+y**2))\n",
    "    \n",
    "arccos2 = np.vectorize(arccos2)   \n",
    "gRacel1 = arccos2(gXYZcel[:,0],gXYZcel[:,1])    \n",
    "gDeccel1 = np.arcsin(gXYZcel[:,2])\n",
    "fig = plt.figure(dpi=250)\n",
    "plt.plot(np.arange(len(t)),gRacel-gRacel1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [],
   "source": [
    "def arccos2(x,y):\n",
    "    if x==0 and y==0:\n",
    "        return 0\n",
    "    elif y>0:\n",
    "        return np.arccos(x/np.sqrt(x**2+y**2))\n",
    "    elif y<0:\n",
    "        return np.pi+np.arccos(x/np.sqrt(x**2+y**2))\n",
    "    \n",
    "arccos2 = np.vectorize(arccos2)   \n",
    "gRacel1 = arccos2(gXYZcel[:,0],gXYZcel[:,1])    \n",
    "gDeccel1 = np.arcsin(gXYZcel[:,2])\n",
    "fig = plt.figure(dpi=250)\n",
    "plt.plot(np.arange(len(t)),gRacel-gRacel1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.arccos(0.5)/np.pi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.arccos(0)/np.pi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [],
   "source": [
    "gRacel[:20]-gRacel1[:20],(gRacel-gRacel1).max(),gRacel.max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [],
   "source": [
    "def arccos2(x,y):\n",
    "    if x==0 and y==0:\n",
    "        return 0\n",
    "    elif x>0 and y==0:\n",
    "        return 0\n",
    "    elif x<0 and y==0:\n",
    "        return np.pi\n",
    "    elif y>0:\n",
    "        return np.arccos(x/np.sqrt(x**2+y**2))\n",
    "    elif y<0:\n",
    "        return np.pi+np.arccos(x/np.sqrt(x**2+y**2))\n",
    "    \n",
    "arccos2 = np.vectorize(arccos2)   \n",
    "gRacel1 = arccos2(gXYZcel[:,0],gXYZcel[:,1])    \n",
    "gDeccel1 = np.arcsin(gXYZcel[:,2])\n",
    "fig = plt.figure(dpi=250)\n",
    "plt.plot(np.arange(len(t)),gRacel-gRacel1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.arccos(1)/np.pi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.arccos(-1)/np.pi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [],
   "source": [
    "def arccos2(x,y):\n",
    "    if x==0 and y==0:\n",
    "        return 0\n",
    "    elif x>0 and y==0:\n",
    "        return 0\n",
    "    elif x<0 and y==0:\n",
    "        return np.pi\n",
    "    elif y>0:\n",
    "        return np.arccos(x/np.sqrt(x**2+y**2))\n",
    "    elif y<0:\n",
    "        return np.pi+np.arccos(x/np.sqrt(x**2+y**2))\n",
    "    \n",
    "arccos2 = np.vectorize(arccos2)   \n",
    "gRacel1 = arccos2(gXYZcel[:,0],gXYZcel[:,1])    \n",
    "gDeccel1 = np.arcsin(gXYZcel[:,2])\n",
    "fig = plt.figure(dpi=250)\n",
    "plt.plot(np.arange(len(100)),(gRacel-gRacel1)[:100])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [],
   "source": [
    "def arccos2(x,y):\n",
    "    if x==0 and y==0:\n",
    "        return 0\n",
    "    elif x>0 and y==0:\n",
    "        return 0\n",
    "    elif x<0 and y==0:\n",
    "        return np.pi\n",
    "    elif y>0:\n",
    "        return np.arccos(x/np.sqrt(x**2+y**2))\n",
    "    elif y<0:\n",
    "        return np.pi+np.arccos(x/np.sqrt(x**2+y**2))\n",
    "    \n",
    "arccos2 = np.vectorize(arccos2)   \n",
    "gRacel1 = arccos2(gXYZcel[:,0],gXYZcel[:,1])    \n",
    "gDeccel1 = np.arcsin(gXYZcel[:,2])\n",
    "fig = plt.figure(dpi=250)\n",
    "plt.plot(np.arange(100),(gRacel-gRacel1)[:100])"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 4
}
